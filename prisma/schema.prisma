// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  discordId     String        @id
  username      String
  discriminator String
  avatar        String?
  joinedAt      DateTime?
  lastUpdated   DateTime?
  roles         UserRole[]
  osu           Osu?
  collab        Collab[]
  pick          Pick[]
  participant   Participant[]
}

model UserRole {
  user          User        @relation(fields: [userDiscordId], references: [discordId], onDelete: Cascade)
  role          DiscordRole @relation(fields: [discordRoleId], references: [id], onDelete: Cascade)
  userDiscordId String
  discordRoleId String

  @@unique([userDiscordId, discordRoleId])
}

model DiscordRole {
  id       String     @id
  name     String
  display  Boolean    @default(false)
  UserRole UserRole[]
}

model Osu {
  id            String    @id @unique
  user          User      @relation(fields: [discordId], references: [discordId], onDelete: Cascade)
  discordId     String    @unique
  username      String
  country       String
  avatar        String
  restricted    Boolean   @default(false)
  access_token  String?
  refresh_token String?
  expires_at    DateTime?
  modes         OsuMode[]
}

model OsuMode {
  id            String    @id @default(cuid())
  user          Osu       @relation(fields: [osuId], references: [id], onDelete: Cascade)
  osuId         String
  gamemode      String
  rank          Int?
  countryRank   Int?
  level         Int?
  pp            Float?
  rankedScore   String?
  hitAccuracy   Decimal?
  playCount     Int?
  playTime      Int?
  lastRefreshed DateTime?
  selected      Boolean

  @@unique([osuId, gamemode])
}

model Collab {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  title       String
  topic       String
  logo        String?
  creator     User          @relation(fields: [creatorId], references: [discordId], onDelete: Cascade)
  creatorId   String
  rules       String?
  type        CollabType
  status      CollabStatus
  Pick        Pick[]
  Participant Participant[]
}

enum CollabType {
  OPEN
  LIMITED
  PRIVATE
}

enum CollabStatus {
  DESIGN
  EARLY_ACCESS
  OPEN
  BUMP
  RELEASE
  CLOSED
}

model Pick {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  name        String
  image       String?
  extra       Json?
  characterId Int?
  character   AnimeCharacter? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  collab      Collab          @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId    String
  User        User?           @relation(fields: [userId], references: [discordId])
  userId      String
  Participant Participant[]

  @@unique([collabId, characterId])
}

model Participant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [discordId])
  userId    String
  collab    Collab   @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId  String
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  pickId    String
}

model AnimeCharacter {
  id         Int    @id
  name       String
  anime_name String

  Pick Pick[]
  @@index([name])
}
