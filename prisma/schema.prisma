// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  discordId     String        @id
  username      String
  discriminator String
  roles         String[]
  Osu           Osu?
  Collab        Collab[]
  Pick          Pick[]
  Participant   Participant[]
}

model Osu {
  id     String @id
  user   User   @relation(fields: [userId], references: [discordId], onDelete: Cascade)
  userId String @unique
}

model Collab {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  title       String
  topic       String
  logo        String?
  creator     User          @relation(fields: [creatorId], references: [discordId], onDelete: Cascade)
  creatorId   String
  type        CollabType
  status      CollabStatus
  Pick        Pick[]
  Participant Participant[]
}

enum CollabType {
  OPEN
  LIMITED
  PRIVATE
}

enum CollabStatus {
  DESIGN
  EARLY_ACCESS
  OPEN
  BUMP
  RELEASE
  CLOSED
}

model Pick {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  name        String
  image       String
  characterId String?
  collab      Collab        @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId    String
  User        User?         @relation(fields: [userId], references: [discordId])
  userId      String
  Participant Participant[]
}

model Participant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [discordId])
  userId    String
  collab    Collab   @relation(fields: [collabId], references: [id], onDelete: Cascade)
  collabId  String
  pick      Pick     @relation(fields: [pickId], references: [id], onDelete: Cascade)
  pickId    String
}
